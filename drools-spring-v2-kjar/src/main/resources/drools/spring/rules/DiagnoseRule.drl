package drools.spring.rules;

import drools.spring.example.model.Visit;
import drools.spring.example.model.Symptom;
import drools.spring.example.model.ReasonInput;
import drools.spring.example.model.DrugType;
import static drools.spring.example.model.ReasonInput.inLastSixMonths;
import static drools.spring.example.model.ReasonInput.inLast14days;
import static drools.spring.example.model.ReasonInput.inLast21days;
import java.util.List;
import java.util.Date;

rule "SimptomiPrehlade"
    agenda-group "simptomi"
	when
		$ri : ReasonInput($sym:symptoms, $pv:previousVisits)
        $n: Number() from accumulate(
             Symptom (description.equals("Curenje iz nosa")
                      || description.equals("Bol u grlu") ||
                      description.equals("Glavobolja") || description.equals("Kijanje") ||
                      description.equals("Kasalj")) from $sym,
             init(int broj = 0;),
             action(broj++;),
             result(broj)
         )
	then
		$ri.setPrehladaSym($n);
end

rule "SimptomiGroznice"
    agenda-group "simptomi"
	when
		$ri : ReasonInput($sym:symptoms, $pv:previousVisits)
        $n: Number() from accumulate(
              Symptom (description.equals("Curenje iz nosa")
                       || description.equals("Bol u grlu") || (description.equals("Temperatura")
                        && value >= 38) || description.equals("Drhtavica") ||
                       description.equals("Glavobolja") || description.equals("Kijanje") ||
                       description.equals("Kasalj")) from $sym,
              init(int broj = 0;),
              action(broj++;),
              result(broj)
            )
	then
		$ri.setGroznicaSym($n);

end

rule "SimptomiUK"
    agenda-group "simptomi"
	when
		$ri : ReasonInput($sym:symptoms, $pv:previousVisits)
        $n: Number() from accumulate(
              Symptom (description.equals("Bol u grlu") ||
                      (description.equals("Temperatura") && value >= 40 && value <= 41) ||
                      description.equals("Drhtavica") ||
                        description.equals("Gubitak apetita") ||
                        description.equals("Umor") ||
                        description.equals("Bol koji se siri do usiju") ||
                        description.equals("Zuti sekret iz nosa") ||
                       description.equals("Glavobolja")) from $sym,
              init(int broj = 0;),
              action(broj++;),
              result(broj)
            )
	then
		$ri.setUpalaKrSym($n);
end

rule "SimptomiSI"
    agenda-group "simptomi"
	when
		$ri : ReasonInput($sym:symptoms, $pv:previousVisits)
	    $n1: Number() from accumulate(
              Symptom (description.equals("Oticanje oko ociju") ||
                          description.equals("Bol u grlu") ||
                      (description.equals("Temperatura") && value >= 38) ||
                        description.equals("Bol koji se siri do usiju") ||
                        description.equals("Zuti sekret iz nosa") ||
                        description.equals("Kasalj") ||
                       description.equals("Glavobolja")) from $sym,
              init(int broj = 0;),
              action(broj++;),
              result(broj)
            )
        $n2: Number() from accumulate(
                           Visit ( ReasonInput.inLastSixMonths(date)
                            && (disease.name == "Prehlada" || disease.name == "Grip")) from $pv,
                           init(int broj = 0;),
                           action(broj = 1;),
                           result(broj)
                         )
	then
		$ri.setSinfSym($n1.intValue() + $n2.intValue());
end

/**
Druga grupa
*/

rule "SimptomiHipertenzija"
    agenda-group "simptomi"
	when
		$ri : ReasonInput($pv:previousVisits)
		$n : Number() from accumulate ( Visit (ReasonInput.inLastSixMonths(date) && $sym:symptoms) from $pv,
        		    init(int number = 0;),
        		    action(for(Object symptom:$sym){
        		        if(((Symptom)symptom).getDescription().equals("Visok pritisak")){
        		            number++;
        		        }
        		    }),
        		    result(number)
        )
	then
	    System.out.println($n);
		$ri.setHipertenzijaSym($n);
end

rule "SimptomiDijabetes"
    agenda-group "simptomi"
	when
		$ri : ReasonInput($sym:symptoms, $pv:previousVisits)
	    $n: Number() from accumulate(
                      Symptom (description.equals("Cesto uriniranje") ||
                                  description.equals("Mucnina i povracanje") ||
                                description.equals("Zamor") ||
                               description.equals("Gubitak telesne tezine")) from $sym,
                      init(int broj = 0;),
                      action(broj++;),
                      result(broj)
                    )
	then
	    System.out.println("dij");
		$ri.setDijabetesSym($n);
end


/**
* Treca grupa
*/

rule "HronicnaBubreznaBolest"
    agenda-group "simptomi"
    when
        $ri : ReasonInput($sym:symptoms, $pv:previousVisits)
        $opsti: Number() from accumulate(
            Symptom(description.equals("Nocturia") ||
                                description.equals("Otoci nogu i zglobova") ||
                              description.equals("Zamor") ||
                              description.equals("Gusenje") ||
                             description.equals("Bol u grudima")) from $sym,
            init(int number = 0;),
            action(number++;),
            result(number)
        )
        $spec: Number() from accumulate(
                    Visit (( ReasonInput.inLastSixMonths(date) && disease.name == "Hipertenzija")
                            || (disease.name == "Dijabetes")) from $pv,
                    init(int number = 0;),
                    action(number = 1;),
                    result(number)
                )
    then
        $ri.setHbbSymGen($opsti);
        $ri.setHbbSymSpec($spec);
end

rule "AkutnaBubreznaPovreda"
    agenda-group "simptomi"
    when
        $ri : ReasonInput($sym:symptoms, $pv:previousVisits)
        $opsti: Number() from accumulate(
            Symptom(description.equals("Dijareja") ||
                                description.equals("Otoci nogu i zglobova") ||
                              description.equals("Zamor") ||
                              description.equals("Gusenje")) from $sym,
            init(int number = 0;),
            action(number++;),
            result(number)
        )
        $spec: Number() from accumulate(
            Symptom (description.equals("Oporavak")) from $sym,
            init(int present = 0;),
            action(present = 1;),
            result(present)
        )
        $spec2: Number() from accumulate(
            Visit ( ReasonInput.inLast21days(date) && drug.drugType.equals(DrugType.Antibiotic)
            )from $pv,
            init(int present = 0;),
            action(present = 1;),
            result(present)
        )
        $spec3 : Number() from accumulate ( Visit (ReasonInput.inLast14days(date) && $sym2:symptoms) from $pv,
        		    init(int present = 0;),
        		    action(for(Object symptom:$sym2){
        		        if(((Symptom)symptom).getDescription().equals("Temperatura")){
        		            present = 1;
        		        }
        		    }),
        		    result(present)
        		)
    then
        $ri.setAbbSymGen($opsti);
        $ri.setAbbSymSpec($spec.intValue() + $spec2.intValue() + $spec3.intValue());
end

